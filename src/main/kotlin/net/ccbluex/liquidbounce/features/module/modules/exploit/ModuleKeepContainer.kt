package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.event.KeyEvent
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.handler
import net.ccbluex.liquidbounce.event.repeatable
import net.ccbluex.liquidbounce.features.module.Category
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.utils.client.chat
import net.minecraft.client.gui.screen.ingame.GenericContainerScreen
import net.minecraft.client.gui.screen.ingame.InventoryScreen
import net.minecraft.network.packet.c2s.play.CloseHandledScreenC2SPacket
import net.minecraft.network.packet.s2c.play.CloseScreenS2CPacket
import org.lwjgl.glfw.GLFW

object ModuleKeepContainer : Module("KeepContainer", Category.EXPLOIT) {

    var container: GenericContainerScreen? = null

    override fun disable() {
        if (container != null) {
            network.sendPacket(CloseHandledScreenC2SPacket(container!!.screenHandler.syncId))
            container = null
        }
    }

    val repeatable = repeatable {
        chat("${mc.isWindowFocused}")
        if (mc.currentScreen is GenericContainerScreen || mc.currentScreen is InventoryScreen) {
            mc.windowFocused = true
            mc.currentScreen = null
        }
    }

    val packetHandler = handler<PacketEvent> { event ->
        when (val packet = event.packet) {
            is CloseHandledScreenC2SPacket -> event.cancelEvent()
            is CloseScreenS2CPacket -> {
                if (container != null && container!!.screenHandler.slots != null && packet.syncId == container!!.screenHandler.syncId) {
                    container = null
                }
            }
        }
    }

    val keyHandler = handler<KeyEvent> { event ->
        if (event.action == GLFW.GLFW_PRESS && event.key.code == GLFW.GLFW_KEY_INSERT) {
            if (container == null) {
                return@handler
            }

            mc.setScreen(container)
        }
    }
}
